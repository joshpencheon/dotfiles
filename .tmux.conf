# Use C-a instead of C-b for tmux. C-a C-a to get "C-a".
unbind-key C-b
set -g prefix C-Space
bind-key C-Space send-prefix

# Set the default terminal mode to 256color mode
set -g default-terminal "screen-256color"

# force true colour on:
set -ga terminal-overrides ",xterm-256color:Tc"

# Use reattach-to-user-namespace if it's available
set -g default-command "command -v reattach-to-user-namespace > /dev/null && reattach-to-user-namespace -l $SHELL || $SHELL -l"

# Lower key repeat rate (default: 500ms)
set -g repeat-time 125
# Don't wait for escape sequences:
set -s escape-time 0

# Show messages for 1 second:
set -g display-time 1000

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
unbind   -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# Start windows and panes at 1, not 0
set -g base-index 1
set -g pane-base-index 1
set -g renumber-windows on

# <Shift>-<Left/Right> to swap windows:
bind -n S-Left  previous-window
bind -n S-Right next-window

# <Ctrl><Shift>-<Left/Right> to reorder windows:
bind-key -n C-S-Left swap-window -t -1
bind-key -n C-S-Right swap-window -t +1

# Reload:
bind r source-file ~/.tmux.conf \; display-message "Config reloaded!"

# Enable mouse events:
set -g mouse on

# When scrolling up in normal mode, automatically select that pane,
# and enter copy mode (exiting again on scroll to bottom):
bind-key -n WheelUpPane   if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
bind-key -n WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =;               send-keys -M"
# When scrolling in `vi-copy` mode, the scroll one line at a time:
bind-key -t vi-copy WheelUpPane   scroll-up
bind-key -t vi-copy WheelDownPane scroll-down

# New panes should start in the current directory:
bind '"' split-window    -c "#{pane_current_path}"
bind %   split-window -h -c "#{pane_current_path}"
bind c   new-window      -c "#{pane_current_path}"

# Smart pane switching with awareness of vim splits.
# See https://github.com/neovim/neovim/issues/2048 for fix for <C-h> not working
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h   ) || tmux select-pane -L || tmux select-pane"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j   ) || tmux select-pane -D || tmux select-pane"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k   ) || tmux select-pane -U || tmux select-pane"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l   ) || tmux select-pane -R || tmux select-pane"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

# Ensure "clear screen" is still accessible with the prefix:
bind C-l send-keys 'C-l'
bind C-k clear-history

## status bar
set -g status-bg colour53
set -g status-justify 'left'

# left
set -g status-left-fg colour222
set -g status-left-bg colour53
set -g status-left ' #S > '
set -g status-left-length '100'

# right
set -g status-right-fg colour222
set -g status-right-bg colour53
set -g status-right ' %H:%M #(hostname -s) '
set -g status-right-length '100'

## window options
# colour
set -g window-status-fg colour222
set -g window-status-bg colour53
set -g window-status-format ' #I #W '
set -g window-status-current-fg colour53
set -g window-status-current-bg colour222
set -g window-status-current-format ' #I #W '

## pane options
# colour
set -g pane-border-fg colour237
set -g pane-border-bg colour0
set -g pane-active-border-fg colour222
set -g pane-active-border-bg colour0

## message options
# colour
set -g message-fg colour0
set -g message-bg colour202
